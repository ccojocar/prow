# Default values for prow.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

image:
  repository: gcr.io/jenkinsx-dev/cosmin
  tag: v20190403-acdb61124

deck:
  replicaCount: 2
  probe:
    liveness:
      path: /healthz
      port: 8081
    readiness:
      path: /healthz/ready
      port: 8081
  image:
    repository: "{{ .Values.image.repository }}/deck"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 30
  args:
    - --hook-url=http://hook/plugin-help
    - --tide-url=http://tide
  resources:
    limits:
     cpu: 200m
     memory: 256Mi
    requests:
     cpu: 100m
     memory: 128Mi
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 8080
    annotations:
      fabric8.io/expose: "true"
      fabric8.io/ingress.annotations: "kubernetes.io/ingress.class: nginx\nnginx.ingress.kubernetes.io/auth-type: basic\nnginx.ingress.kubernetes.io/auth-secret: jx-basic-auth"

echotest:
  interval: 10m
  command: /bin/date

pipelinerunner:
  enabled: false
  image:
    repository: gcr.io/jenkinsxio/builder-maven
    tag: 0.1.343
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 180
  probe:
    livenessPath: /health
    readinessPath: /ready
  command:
  - jx
  args:
  - "controller"
  - "pipelinerunner"
  resources:
    limits:
     cpu: 400m
     memory: 256Mi
    requests:
     cpu: 200m
     memory: 128Mi
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 8080
  env:
    GIT_AUTHOR_NAME: "jenkins-x-bot"
    GIT_AUTHOR_EMAIL: "jenkins-x@googlegroups.com"
    XDG_CONFIG_HOME: "/home/jenkins"
    MAVEN_OPTS: "-Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn"

buildnum:
  enabled: true
  image:
    repository: "{{ .Values.image.repository }}/tot"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 180
  probe:
    liveness:
      path: /healthz
      port: 8081
    readiness:
      path: /healthz/ready
      port: 8081
  args:
    - -storage=/store/buildnum.json
    - -fallback
  resources:
    limits:
     cpu: 400m
     memory: 256Mi
    requests:
     cpu: 200m
     memory: 128Mi
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 8888

crier:
  image:
    repository: "{{ .Values.image.repository }}/crier"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 180
  args:
    - -gerrit-workers=0
    - -github-workers=1
    - -logtostderr
    - -config-path=/etc/config/config.yaml
    - -github-token-path=/etc/github/oauth
  resources:
    limits:
     cpu: 400m
     memory: 256Mi
    requests:
     cpu: 200m
     memory: 128Mi

branchprotector:
  enabled: false
  schedule: "54 * * * *"  # Every hour at 54 minutes past the hour
  image:
    repository: "{{ .Values.image.repository }}/branchprotector"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  args:
    - --config-path=/etc/config/config.yaml
    - --github-token-path=/etc/github/oauth
    - --confirm
    - --github-endpoint=https://api.github.com
  resources:
    limits:
     cpu: 400m
     memory: 256Mi
    requests:
     cpu: 200m
     memory: 128Mi

hook:
  replicaCount: 2
  probe:
    path: /
  image:
    repository: "{{ .Values.image.repository }}/hook"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 180
  args:
    - --dry-run=false
  resources:
    limits:
     cpu: 400m
     memory: 256Mi
    requests:
     cpu: 200m
     memory: 128Mi
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 8888
    annotations:
      fabric8.io/expose: "true"

horologium:
  replicaCount: 1
  image:
    repository: "{{ .Values.image.repository }}/horologium"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 30
  args:
    - --dry-run=false
  resources:
    limits:
     cpu: 200m
     memory: 256Mi
    requests:
     cpu: 100m
     memory: 128Mi

plank:
  image:
    repository: "{{ .Values.image.repository }}/plank"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 30
  args:
    - --dry-run=false
  resources:
    limits:
     cpu: 200m
     memory: 256Mi
    requests:
     cpu: 100m
     memory: 128Mi

build:
  image:
    repository: "{{ .Values.image.repository }}/build"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 30
  resources:
    limits:
     cpu: 200m
     memory: 256Mi
    requests:
     cpu: 100m
     memory: 128Mi

pipeline:
  image:
    repository: "{{ .Values.image.repository }}/pipeline"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: Always
  terminationGracePeriodSeconds: 30
  resources:
    limits:
     cpu: 200m
     memory: 256Mi
    requests:
     cpu: 100m
     memory: 128Mi

sinker:
  replicaCount: 1
  image:
    repository: "{{ .Values.image.repository }}/sinker"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 30
  resources:
    limits:
     cpu: 200m
     memory: 256Mi
    requests:
     cpu: 100m
     memory: 128Mi

plugins:
  yaml: ""

user: james-foo


tide:
  replicaCount: 1
  probe:
    path: /
  image:
    repository: "{{ .Values.image.repository }}/tide"
    tag: "{{ .Values.image.tag }}"
  imagePullPolicy: IfNotPresent
  terminationGracePeriodSeconds: 30
  args:
    - --dry-run=false
    #- --github-endpoint=http://ghproxy
    - --github-endpoint=https://api.github.com
  resources:
    limits:
     cpu: 200m
     memory: 256Mi
    requests:
     cpu: 100m
     memory: 128Mi
  service:
    type: ClusterIP
    externalPort: 80
    internalPort: 8888
    annotations:
      fabric8.io/expose: "true"
      fabric8.io/ingress.annotations: "kubernetes.io/ingress.class: nginx\nnginx.ingress.kubernetes.io/auth-type: basic\nnginx.ingress.kubernetes.io/auth-secret: jx-basic-auth"
